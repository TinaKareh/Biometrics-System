/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Fragments;

import DataModel.StatusType;
import futuristicbio.biometrics.CrudOperations;
import futuristicbio.biometrics.DBConnect;
import futuristicbio.biometrics.DataApplicants;
import futuristicbio.biometrics.DataUpdateDashboard;
import futuristicbio.biometrics.EnrollmentDetails;
import futuristicbio.biometrics.Login_Frame;
import futuristicbio.biometrics.User;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author Futuristic Ltd
 */
public class FragmentInformationUpdate extends javax.swing.JPanel {

    private DataUpdateDashboard data;
    private ArrayList<EnrollmentDetails> listingApplicants;
    /**
     * Creates new form FragmentInformationUpdate
     */
    public FragmentInformationUpdate() {
        initComponents();
           DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
       centerRenderer.setHorizontalAlignment( JLabel.CENTER );
       tableSwing91.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
       ((DefaultTableModel)tableSwing91.getModel()).setRowCount(0);
       init();
    }
    
     public FragmentInformationUpdate(DataUpdateDashboard data) {
        initComponents();
        this.data = data;
           DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
       centerRenderer.setHorizontalAlignment( JLabel.CENTER );
       tableSwing91.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
       tableSwing91.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
       ((DefaultTableModel)tableSwing91.getModel()).setRowCount(0);
       init();
    }
     
       private void init(){
      
        listingApplicants = new ArrayList<>();
        listingApplicants = new CrudOperations().getAllRegistrations();
        if (listingApplicants.size() > 0) {
            for (int i = 0; i < listingApplicants.size(); i++) {
                EnrollmentDetails details = listingApplicants.get(i);
                tableSwing91.addRow(new Object[]{details.getPoliceId(), details.getFirstName(), details.getSurname(), details.getPosition(),
                    details.getRank(), details.getCounty(), details.getState(), (details.getStatus().equals("1")? StatusType.Edit: StatusType.Reset)});
          
            }
        } else {
            //should add empty table row
            System.out.println("No Applicant found");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roundCorner1 = new SwingClass.RoundCorner();
        jPanel2 = new javax.swing.JPanel();
        swingSearch1 = new SwingCustiom.SwingSearch();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSwing91 = new SwingCustiom.TableSwing20();

        jPanel2.setBackground(java.awt.Color.white);

        swingSearch1.setBackground(new java.awt.Color(240, 240, 240));
        swingSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swingSearch1ActionPerformed(evt);
            }
        });
        swingSearch1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                swingSearch1KeyReleased(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(11, 46, 70));
        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/print.png"))); // NOI18N
        jButton1.setText("Print");
        jButton1.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(swingSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 375, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(swingSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jScrollPane1.setBackground(java.awt.Color.white);

        tableSwing91.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Police ID", "First Name", "Last Name", "Position Held", "Rank", "County", "State", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSwing91.setSelectionBackground(new java.awt.Color(0, 112, 54));
        tableSwing91.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSwing91MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableSwing91);

        javax.swing.GroupLayout roundCorner1Layout = new javax.swing.GroupLayout(roundCorner1);
        roundCorner1.setLayout(roundCorner1Layout);
        roundCorner1Layout.setHorizontalGroup(
            roundCorner1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundCorner1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roundCorner1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        roundCorner1Layout.setVerticalGroup(
            roundCorner1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundCorner1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(roundCorner1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(roundCorner1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void swingSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swingSearch1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_swingSearch1ActionPerformed

    private void tableSwing91MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSwing91MouseClicked
        // TODO add your handling code here:
        int index = tableSwing91.getSelectedRow();
        int index2 = tableSwing91.getSelectedColumn();
        TableModel model = tableSwing91.getModel();
        String value1 = model.getValueAt(index,index2).toString();
        String registration = model.getValueAt(index, 0).toString();
        //String sql ="Select * From police_details where registration_number='"+registration+"'";
        Connection conn = null;
        ResultSet rs = null;
        JSONObject jsonObject = new JSONObject();
         JSONArray array = new JSONArray();
        try {
            conn = DBConnect.ConnecrDb();
            String sql = "SELECT PD.*,ED.*,FD.*,AI.*,TE.*,FAD.*,PE.work AS police_work,PE.location AS police_work_location,PE.rank AS police_work_rank,PE.work_from AS police_work_from,PE.work_to AS police_work_to,PE.work2 AS police_work2,PE.location2 AS police_work_location2,PE.rank2 AS police_work_rank2, PE.work2_from AS police_work_from2,PE.work2_to AS police_work_to2,ME.work AS military_work,ME.description AS military_description,ME.location AS military_work_location,ME.duration_from AS military_duration_from,ME.duration_to AS military_duration_to,ME.provided_by AS military_provided_by,ME.work2 AS military_work2,ME.description2 AS military_description2,ME.provided_by2 AS military_provided_by2,ME.location2 AS military_work_location2,ME.duration2_from AS military_duration_from2,ME.duration2_to AS military_duration_to2,CE.work AS civil_work,CE.description AS civil_description,CE.location AS civil_work_location,CE.duration_from AS civil_duration_from,CE.duration_to AS civil_duration_to,CE.provided_by AS civil_provided_by,CE.work2 AS civil_work2,CE.description2 AS civil_description2,CE.location2 AS civil_work_location2,CE.provided_by2 AS civil_provided_by2,CE.duration2_from AS civil_duration_from2,CE.duration2_to AS civil_duration_to2,PT.training AS police_training,PT.module AS police_training_module,PT.provided_by AS police_training_provided_by,PT.location AS police_training_location,PT.qualified AS police_training_qualified,PT.period_from AS police_training_period_from,PT.period_to AS police_training_period_to,PT.training2 AS police_training2,PT.module2 AS police_training_module2,PT.provided_by2 AS police_training_provided_by2,PT.location2 AS police_training_location2,PT.qualified2 AS police_training_qualified2,PT.period2_from AS police_training_period_from2,PT.period2_to AS police_training_period_to2,MT.training AS military_training,MT.module AS military_training_module,MT.provided_by AS military_training_provided_by,MT.location AS military_training_location,MT.qualified AS military_training_qualified,MT.period_from AS military_training_period_from,MT.period_to AS military_training_period_to,MT.training2 AS military_training2,MT.module2 AS military_training_module2,MT.provided_by2 AS military_training_provided_by2,MT.location2 AS military_training_location2,MT.qualified2 AS military_training_qualified2,MT.period2_from AS military_training_period_from2,MT.period2_to AS military_training_period_to2 FROM police_details PD LEFT JOIN family_details FD on PD.id = FD.p_id LEFT JOIN additional_info AI on PD.id =AI.p_id LEFT JOIN education_details ED on PD.id= ED.p_id LEFT JOIN police_experience PE on PD.id =PE.p_id LEFT JOIN military_work_experience ME on PD.id=ME.p_id LEFT JOIN civil_work_experience CE on PD.id= CE.p_id LEFT JOIN police_training_details PT on PD.id=PT.p_id LEFT JOIN military_training_details MT on PD.id= MT.p_id LEFT JOIN technical_qualifications TE on PD.id=TE.p_id LEFT JOIN firearm_details FAD on PD.id=FAD.p_id WHERE registration_number='"+registration+"'";

         try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
         
         Statement stmt = conn.createStatement();
         rs =stmt.executeQuery(sql);
         ArrayList<String> viewUser = new ArrayList<>();
         while(rs.next()){
             JSONObject record = new JSONObject();
             //Inserting key-value pairs into the json object
             record.put("first_name", rs.getString("first_name"));
             record.put("middle_name",rs.getString("middle_name"));
             record.put("other_name", rs.getString("other_name"));
             record.put("surname",rs.getString("surname"));
             record.put("gender", rs.getString("gender"));
             record.put("position_held",rs.getString("position_held"));
             record.put("email", rs.getString("email"));
             record.put("police_idno",rs.getString("police_idno"));
             record.put("place_of_birth", rs.getString("place_of_birth"));
             record.put("state_of_origin",rs.getString("state_of_origin"));
             record.put("height", rs.getString("height"));
             record.put("weight",rs.getString("weight"));
             record.put("blood_group", rs.getString("blood_group"));
             record.put("date_birth",rs.getString("date_birth"));
             record.put("state", rs.getString("state"));
             record.put("county",rs.getString("county"));
             record.put("rank", rs.getString("rank"));
             record.put("permanent_address",rs.getString("permanent_address"));
             record.put("present_address",rs.getString("present_address"));
             record.put("duty_station", rs.getString("duty_station"));
             record.put("retired",rs.getString("retired"));
             record.put("id", rs.getInt("id"));
             record.put("national_id",rs.getString("national_id"));
             record.put("marital_status",rs.getString("marital_status"));
             record.put("id_number",rs.getString("id_number"));
             record.put("letter_employment",rs.getString("letter_employment"));
             record.put("father_name",rs.getString("father_name"));
             record.put("father_address",rs.getString("father_address"));
             record.put("mother_name",rs.getString("mother_name"));
             record.put("mother_address",rs.getString("mother_address"));
             record.put("dependent",rs.getString("dependent"));
             record.put("dependency_details",rs.getString("dependency_details"));
             record.put("nextkin_name",rs.getString("nextkin_name"));
             record.put("nextkin_address",rs.getString("nextkin_address"));
             record.put("nextkin_job",rs.getString("nextkin_job"));
             record.put("nextkin_phone",rs.getString("nextkin_phone"));
             record.put("spouse_name",rs.getString("spouse_name"));
             record.put("spouse_address",rs.getString("spouse_address"));
             record.put("spouse_job",rs.getString("spouse_job"));
             record.put("spouse2_name",rs.getString("spouse2_name"));
             record.put("spouse2_address",rs.getString("spouse2_address"));
             record.put("spouse2_job",rs.getString("spouse2_job"));
             record.put("child_name",rs.getString("child_name"));
             record.put("child_date_birth",rs.getString("child_date_birth"));
             record.put("child2_name",rs.getString("child2_name"));
             record.put("child2_date_birth",rs.getString("child2_date_birth"));
             record.put("child3_name",rs.getString("child3_name"));
             record.put("child3_date_birth",rs.getString("child3_date_birth"));
             record.put("imprisoned",rs.getString("imprisoned"));
             record.put("imprisonment_details",rs.getString("imprisonment_details"));
             record.put("health_condition",rs.getString("health_condition"));
             record.put("health_details",rs.getString("health_details"));
             record.put("battles",rs.getString("battles"));
             record.put("battle_details",rs.getString("battle_details"));
             record.put("participation_date",rs.getString("participation_date"));
             record.put("place_of_participation",rs.getString("place_of_participation"));
             record.put("additional_info",rs.getString("additional_info"));
             record.put("arabic",rs.getString("arabic"));
             record.put("english",rs.getString("english"));
             record.put("other_language",rs.getString("other_language"));
             record.put("language2",rs.getString("language2"));
             record.put("medical_fitness",rs.getString("medical_fitness"));
             record.put("injury",rs.getString("injury"));
             record.put("physical_challenge",rs.getString("physical_challenge"));
             record.put("primary_institution",rs.getString("primary_institution"));
             record.put("primary_location",rs.getString("primary_location"));
             record.put("primary_from",rs.getString("primary_from"));
             record.put("primary_to",rs.getString("primary_to"));
             record.put("primary_certificate",rs.getString("primary_certificate"));
             record.put("secondary_institution",rs.getString("secondary_institution"));
             record.put("secondary_location",rs.getString("secondary_location"));
             record.put("secondary_from",rs.getString("secondary_from"));
             record.put("secondary_to",rs.getString("secondary_to"));
             record.put("secondary_certificate",rs.getString("secondary_certificate"));
             record.put("college_institution",rs.getString("college_institution"));
             record.put("college_location",rs.getString("college_location"));
             record.put("college_from",rs.getString("college_from"));
             record.put("college_to",rs.getString("college_to"));
             record.put("college_certificate",rs.getString("college_certificate"));
             record.put("university_institution",rs.getString("university_institution"));
             record.put("university_location",rs.getString("university_location"));
             record.put("university_from",rs.getString("university_from"));
             record.put("university_to",rs.getString("university_to"));
             record.put("university_certificate",rs.getString("university_certificate"));
             record.put("post_graduate",rs.getString("post_graduate"));
             record.put("post_graduate_location",rs.getString("post_graduate_location"));
             record.put("post_graduate_from",rs.getString("post_graduate_from"));
             record.put("post_graduate_to",rs.getString("post_graduate_to"));
             record.put("post_graduate_certificate",rs.getString("post_graduate_certificate"));
             record.put("other",rs.getString("other"));
             record.put("other_location",rs.getString("other_location"));
             record.put("other_from",rs.getString("other_from"));
             record.put("other_to",rs.getString("other_to"));
             record.put("other_certificate",rs.getString("other_certificate"));
             record.put("police_work", rs.getString("police_work"));
             record.put("police_work_location",rs.getString("police_work_location"));
             record.put("police_work_rank",rs.getString("police_work_rank"));
             record.put("police_work_from",rs.getString("police_work_from"));
             record.put("police_work_to",rs.getString("police_work_to"));
             record.put("police_work2", rs.getString("police_work2"));
             record.put("police_work_location2",rs.getString("police_work_location2"));
             record.put("police_work_rank2",rs.getString("police_work_rank2"));
             record.put("police_work_from2",rs.getString("police_work_from2"));
             record.put("police_work_to2",rs.getString("police_work_to2"));
             record.put("military_work", rs.getString("military_work"));
             record.put("military_description", rs.getString("military_description"));
             record.put("military_work_location",rs.getString("military_work_location"));
             record.put("military_provided_by",rs.getString("military_provided_by"));
             record.put("military_duration_from",rs.getString("military_duration_from"));
             record.put("military_duration_to",rs.getString("military_duration_to"));
              record.put("military_work2", rs.getString("military_work2"));
             record.put("military_description2", rs.getString("military_description2"));
             record.put("military_work_location2",rs.getString("military_work_location2"));
             record.put("military_provided_by2",rs.getString("military_provided_by2"));
             record.put("military_duration_from2",rs.getString("military_duration_from2"));
             record.put("military_duration_to2",rs.getString("military_duration_to2"));
              record.put("civil_work", rs.getString("civil_work"));
             record.put("civil_description", rs.getString("civil_description"));
             record.put("civil_work_location",rs.getString("civil_work_location"));
             record.put("civil_provided_by",rs.getString("civil_provided_by"));
             record.put("civil_duration_from",rs.getString("civil_duration_from"));
             record.put("civil_duration_to",rs.getString("civil_duration_to"));
              record.put("civil_work2", rs.getString("civil_work2"));
             record.put("civil_description2", rs.getString("civil_description2"));
             record.put("civil_work_location2",rs.getString("civil_work_location2"));
             record.put("civil_provided_by2",rs.getString("civil_provided_by2"));
             record.put("civil_duration_from2",rs.getString("civil_duration_from2"));
             record.put("civil_duration_to2",rs.getString("civil_duration_to2"));
             record.put("police_training", rs.getString("police_training"));
             record.put("police_training_module",rs.getString("police_training_module"));
             record.put("police_training_provided_by",rs.getString("police_training_provided_by"));
             record.put("police_training_location",rs.getString("police_training_location"));
             record.put("police_training_qualified",rs.getString("police_training_qualified"));
             record.put("police_training_period_from",rs.getString("police_training_period_from"));
             record.put("police_training_period_to",rs.getString("police_training_period_to"));
              record.put("police_training2", rs.getString("police_training2"));
             record.put("police_training_module2",rs.getString("police_training_module2"));
             record.put("police_training_provided_by2",rs.getString("police_training_provided_by2"));
             record.put("police_training_location2",rs.getString("police_training_location2"));
             record.put("police_training_qualified2",rs.getString("police_training_qualified2"));
             record.put("police_training_period_from2",rs.getString("police_training_period_from2"));
             record.put("police_training_period_to2",rs.getString("police_training_period_to2"));
             record.put("military_training", rs.getString("military_training"));
             record.put("military_training_module",rs.getString("military_training_module"));
             record.put("military_training_provided_by",rs.getString("military_training_provided_by"));
             record.put("military_training_location",rs.getString("military_training_location"));
             record.put("military_training_qualified",rs.getString("military_training_qualified"));
             record.put("military_training_period_from",rs.getString("military_training_period_from"));
             record.put("military_training_period_to",rs.getString("military_training_period_to"));
              record.put("military_training2", rs.getString("military_training2"));
             record.put("military_training_module2",rs.getString("military_training_module2"));
             record.put("military_training_provided_by2",rs.getString("military_training_provided_by2"));
             record.put("military_training_location2",rs.getString("military_training_location2"));
             record.put("military_training_qualified2",rs.getString("military_training_qualified2"));
             record.put("military_training_period_from2",rs.getString("military_training_period_from2"));
             record.put("military_training_period_to2",rs.getString("military_training_period_to2"));
              record.put("qualification1", rs.getString("qualification1"));
             record.put("qualification2",rs.getString("qualification2"));
             record.put("qualification3",rs.getString("qualification3"));
             record.put("calibre", rs.getString("calibre"));
             record.put("weapon_type",rs.getString("weapon_type"));
             record.put("serial_number",rs.getString("serial_number"));
             record.put("ammunition_number",rs.getString("ammunition_number"));
             record.put("provided_by",rs.getString("provided_by"));
             record.put("location",rs.getString("location"));
             record.put("receipt_date",rs.getString("receipt_date"));
             record.put("calibre1", rs.getString("calibre1"));
             record.put("weapon1_type",rs.getString("weapon1_type"));
             record.put("serial_number1",rs.getString("serial_number1"));
             record.put("ammunition1",rs.getString("ammunition1"));
             record.put("provided_by1",rs.getString("provided_by1"));
             record.put("location1",rs.getString("location1"));
             record.put("receipt_date1",rs.getString("receipt_date1"));
             record.put("calibre2", rs.getString("calibre2"));
             record.put("weapon2_type",rs.getString("weapon2_type"));
             record.put("serial_number2",rs.getString("serial_number2"));
             record.put("ammunition2",rs.getString("ammunition2"));
             record.put("provided_by2",rs.getString("provided_by2"));
             record.put("location2",rs.getString("location2"));
             record.put("receipt_date2",rs.getString("receipt_date2"));
            
            
             array.put(record);
         }
         jsonObject.put("police_details", array);
         System.out.println(jsonObject);
         data.setForm(new FragmentEditEnrollment(data,jsonObject));
          }catch (SQLException e) {
            System.err.println();
            e.printStackTrace();
        } catch (ParseException ex) {
            Logger.getLogger(FragmentInformationUpdate.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_tableSwing91MouseClicked

    private void swingSearch1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_swingSearch1KeyReleased
        try {
            // TODO add your handling code here:
            ((DefaultTableModel)tableSwing91.getModel()).setRowCount(0);
            searchPermits();
        } catch (SQLException ex) {
            Logger.getLogger(FragmentInformationUpdate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_swingSearch1KeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private SwingClass.RoundCorner roundCorner1;
    private SwingCustiom.SwingSearch swingSearch1;
    private SwingCustiom.TableSwing20 tableSwing91;
    // End of variables declaration//GEN-END:variables

    private void searchPermits() throws SQLException{
    Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        ResultSet rs = null;
         connection = DBConnect.ConnecrDb();
        Statement stmt = connection.createStatement();

        try {
           
            if(swingSearch1.getText().equals("")){
                String sql1 = "SELECT registration_number,first_name,middle_name,surname,rank,state,county,biocapture_status "
                    + "FROM police_details WHERE biocapture_status = 1";
                resultSet =stmt.executeQuery(sql1);
            }else{
           
            String sql = "SELECT registration_number,first_name,middle_name,surname,rank,state,county,biocapture_status "
                    + "FROM police_details"
                    + " WHERE biocapture_status ='"+ 1 +"' AND registration_number LIKE '%" + swingSearch1.getText() + "%' OR date_birth LIKE '%" + swingSearch1.getText()  + "%' OR first_name LIKE'%" + swingSearch1.getText()  + "%' OR middle_name LIKE '%" + swingSearch1.getText()  + "%' OR surname LIKE '%" + swingSearch1.getText()  + "%'OR rank LIKE '%" + swingSearch1.getText()  + "%'OR state LIKE '%" + swingSearch1.getText()  + "%'" ;

            statement = connection.prepareStatement(sql);
           

            resultSet = statement.executeQuery();
            }
            if (resultSet == null) {
                System.err.println("null result set");
            }

            DefaultTableModel model = (DefaultTableModel) tableSwing91.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {

                
                User reports = new User(resultSet.getString("registration_number"),resultSet.getString("first_name"),
                        resultSet.getString("middle_name"), resultSet.getString("surname"),
                        resultSet.getString("rank"), resultSet.getString("state"),
                        resultSet.getString("county"),resultSet.getString("biocapture_status")
                        );
                Object[] row = new Object[8];

                row[0] = reports.getpermitNo();
                row[1] = reports.getfirstName();
                row[2] = reports.getlastName();
                row[3] = reports.getoperator();
                row[4] = reports.getspeciality();
                row[5] = reports.getapplicant_id();
                row[6] = reports.getreaddate();
                row[7] = reports.getbiocapture_status().equals("1")? StatusType.Edit: StatusType.Reset;

                model.addRow(row);
            }
            
//                Integer rows = model.getRowCount();
//                 String total = rows.toString();
//                jTextFieldTotalPending.setText(total);

            if (model.getRowCount() < 1) {
                JOptionPane.showMessageDialog(null, "No Application found", "Error", JOptionPane.ERROR_MESSAGE, null);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();

        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Fragments;

import DataModel.StatusType;
import futuristicbio.biometrics.CrudBean;
import futuristicbio.biometrics.DBConnect;
import futuristicbio.biometrics.Dashboard;
import futuristicbio.biometrics.EnrollmentDetails;
import futuristicbio.biometrics.Login_Frame;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringJoiner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author Futuristic Ltd
 */
public class FragmentEnrollmentDashboard extends javax.swing.JPanel {

    private Integer more_status;
    private String last_string;
    private static HttpURLConnection con;
    private ArrayList<EnrollmentDetails> pendingBiometrics;

    /**
     * Creates new form FragmentEnrollmentDashboard
     */
    public FragmentEnrollmentDashboard() {
        initComponents();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tableSwing91.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tableSwing91.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        tableSwing91.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        tableSwing91.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        tableSwing91.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        tableSwing91.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        tableSwing91.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
        ((DefaultTableModel) tableSwing91.getModel()).setRowCount(0);
        init();
    }

    private void init() {
        pendingBiometrics = new ArrayList<>();
        pendingBiometrics = new CrudBean().getSyncedBiometricApplications();
        if (pendingBiometrics.size() > 0) {
            for (int i = 0; i < pendingBiometrics.size(); i++) {
                EnrollmentDetails details = pendingBiometrics.get(i);
                tableSwing91.addRow(new Object[]{details.getPoliceId(), details.getFirstName(), details.getSurname(), details.getPosition(),
                    details.getRank(), details.getCounty(), details.getState()});

                int rowCount = ((DefaultTableModel) tableSwing91.getModel()).getRowCount();
                String rowss = Integer.toString(rowCount);
                // jTextField1.setText(rowss);
            }
        } else {
            //should add empty table row
            System.out.println("No Applicant found");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roundCorner1 = new SwingClass.RoundCorner();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSwing91 = new SwingCustiom.TableSwing20();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/calendar.png"))); // NOI18N
        jLabel1.setText("Date:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jPanel6.setBackground(new java.awt.Color(11, 46, 70));
        jPanel6.setToolTipText("");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/refresh (1).png"))); // NOI18N
        jLabel8.setText("Sync");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel8)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel9.setBackground(new java.awt.Color(11, 46, 70));
        jPanel9.setToolTipText("");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/up-arrow.png"))); // NOI18N
        jLabel10.setText("Transmit");
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        jPanel11.setBackground(new java.awt.Color(11, 46, 70));
        jPanel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel11MouseClicked(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/refresh.png"))); // NOI18N
        jLabel12.setText("Refresh");
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(23, 23, 23))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(205, 205, 205)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(298, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(6, 6, 6))
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel2.setBackground(java.awt.Color.white);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Application"));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(11, 46, 70));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/loupe.png"))); // NOI18N
        jButton1.setText("Search");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(11, 46, 70));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/refresh.png"))); // NOI18N
        jButton2.setText("RESET");
        jButton2.setToolTipText("");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jTextField2)
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setBackground(java.awt.Color.white);

        tableSwing91.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Police ID", "First Name", "Last Name", "Position Held", "Rank", "County", "State"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSwing91.setSelectionBackground(new java.awt.Color(11, 46, 70));
        tableSwing91.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSwing91MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableSwing91);

        javax.swing.GroupLayout roundCorner1Layout = new javax.swing.GroupLayout(roundCorner1);
        roundCorner1.setLayout(roundCorner1Layout);
        roundCorner1Layout.setHorizontalGroup(
            roundCorner1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(roundCorner1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );
        roundCorner1Layout.setVerticalGroup(
            roundCorner1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundCorner1Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roundCorner1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundCorner1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(roundCorner1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(roundCorner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableSwing91MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSwing91MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_tableSwing91MouseClicked

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //searchPermit();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //provideResetOptions();
        ((DefaultTableModel) tableSwing91.getModel()).setRowCount(0);
        init();
        jTextField2.setText("");

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        syncData();
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        // TODO add your handling code here:
        transmitData();
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        // TODO add your handling code here:
        //d.setVisible(true);
        SwingWorker sw1 = new SwingWorker() {
            @Override
            protected String doInBackground() throws Exception {
                ((DefaultTableModel) tableSwing91.getModel()).setRowCount(0);
                init();
                jTextField2.setText("");

                return null;
            }

            protected void done() {
                //d.setVisible(false);
            }

        };
        sw1.execute();
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jPanel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel11MouseClicked
        // TODO add your handling code here:
        ((DefaultTableModel) tableSwing91.getModel()).setRowCount(0);
        init();
    }//GEN-LAST:event_jPanel11MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private SwingClass.RoundCorner roundCorner1;
    private SwingCustiom.TableSwing20 tableSwing91;
    // End of variables declaration//GEN-END:variables

    private void syncData() {

        JOptionPane.showMessageDialog(null, "Sync starting ....");

        SwingWorker sw1 = new SwingWorker() {
            @Override
            protected String doInBackground() throws Exception {
                Connection conn = null;
                ResultSet rs = null;
                ResultSet rs2 = null;
                PreparedStatement pst = null;
                String query = "INSERT INTO police_details () VALUES ()";

                do {

                    String myurl = "https://bo.ssnpsbiodev.co.ke/mwclient/index.php?type=ibiousers";
                    try {

                       URL url = new URL(myurl);

                        try {
                            Class.forName("com.mysql.jdbc.Driver");
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(Login_Frame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        conn = DBConnect.ConnecrDb();

                        con = (HttpURLConnection) url.openConnection();
                        con.setRequestMethod("GET");
                        con.setRequestProperty("Accept", "application/json");

                        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));

                        String responseLine;
                        StringBuilder content = new StringBuilder();

                        while ((responseLine = in.readLine()) != null) {

                            content.append(responseLine);
                            content.append(System.lineSeparator());
                        }
                        String returnedData = content.toString();
                        String str5 = returnedData.replaceAll("[()]", "");
                        String str3 = str5.substring(str5.indexOf(' '), str5.length());
                        String str2 = str3.replaceFirst("\"", "");

                        System.out.println(str2);

                        JSONObject obj = new JSONObject(str2);
                        more_status = obj.getInt("more_status");

                        if (more_status == 0) {
                            JOptionPane.showMessageDialog(null, "Sync Done Successful!");

                        } else {

                             String retired = obj.getString("");
                             String first_name=obj.getString("");
                             String middle_name = obj.getString("");
                             String other_name = obj.getString("");
                             String surname = obj.getString("");
                             String gender = obj.getString("");
                             String marital_status = obj.getString("");
                             String position_held = obj.getString("");
                             String email = obj.getString("");
                             String religion = obj.getString("");
                             String height = obj.getString("");
                             String weight = obj.getString("");
                             String blood_group = obj.getString("");
                             String date_of_birth = obj.getString("");
                             String police_id_number = obj.getString("");
                             String place_of_birth = obj.getString("");
                             String state_of_origin = obj.getString("");
                             String state = obj.getString("");
                             String county = obj.getString("");
                             String rank = obj.getString("");
                             String id_number = obj.getString("");
                             String station = obj.getString("");

                            PreparedStatement preparedStmt = conn.prepareStatement(query);

                            // execute the preparedstatement
                            preparedStmt.execute();
                           
                         
                        }

                    } catch (IOException ex) {

                        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } while (more_status == 1);
                String res = "Finished Execution";
                return res;
            }

            protected void done() {
                ((DefaultTableModel) tableSwing91.getModel()).setRowCount(0);
                init();
            }

        };
        sw1.execute();

    }

    private void transmitData() {

        JOptionPane.showMessageDialog(null, "Transmit starting ....");

        SwingWorker sw1 = new SwingWorker() {
            @Override
            protected String doInBackground() throws Exception {
                Integer user = Integer.parseInt(last_string);
                System.out.println(user);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Date date = new Date();
                String updatedAt = sdf.format(date);
                String firstname = null;
                String lastname = null;
                String employee_num = null;
                int length;

                do {
                    Connection conn = null;
                    ResultSet rs = null;
                    ResultSet rs2 = null;
                    PreparedStatement prepared = null;
                    ResultSet rs1 = null;
                    URI myurl = null;
                    try {
                        myurl = new URI("https://bo.ssnpsbiodev.co.ke//mwclient//index.php?type=icomplete");
                    } catch (URISyntaxException ex) {
                        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    conn = DBConnect.ConnecrDb();

                    JSONObject jsonObject = new JSONObject();
                    JSONArray array = new JSONArray();

                    String query = "SELECT * FROM policebiometrics PB INNER JOIN police_details LB on LB.police_idno =PB.applicantId WHERE LB.bio_sync_receipt_status = 0 AND LB.biocapture_status = 1;";

                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    Statement stmt = null;
                    Statement state = null;
                    try {
                        stmt = conn.createStatement();
                    } catch (SQLException ex) {
                        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        prepared = conn.prepareStatement(query);
                        rs = prepared.executeQuery();
                        //rs = stmt.executeQuery(query);
                    } catch (SQLException ex) {
                        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    try {
                        while (rs.next()) {
                            JSONObject record = new JSONObject();
                            //Inserting key-value pairs into the json object
                            record.put("ID", rs.getInt("id"));
                            record.put("applicant_id", rs.getInt("applicantId"));
                            record.put("right_fore", rs.getString("right_fore"));
                            record.put("right_originalcapture", rs.getString("right_originalcapture"));
                            record.put("right_little", rs.getString("right_little"));
                            record.put("right_middle", rs.getString("right_middle"));
                            record.put("right_ring", rs.getString("right_ring"));
                            record.put("right_thumb", rs.getString("right_thumb"));
                            record.put("left_fore", rs.getString("left_fore"));
                            record.put("left_little", rs.getString("left_little"));
                            record.put("left_middle", rs.getString("left_middle"));
                            record.put("left_ring", rs.getString("left_ring"));
                            record.put("left_thumb", rs.getString("left_thumb"));
                            record.put("left_originalcapture", rs.getString("left_originalcapture"));
                            record.put("imageURL", rs.getString("imageURL"));
                            record.put("signatureURL", rs.getString("signatureURL"));
                            record.put("capture_staffid", rs.getInt("capture_staffid"));
                            record.put("capture_firstname", rs.getString("capture_firstname"));
                            record.put("capture_lastname", rs.getString("capture_lastname"));
                            String capture_timestamp = rs.getString("capture_timestamp");
                            //String capture_timestamp = capture_timestamp1.concat("");
                            record.put("capture_timestamp", capture_timestamp);
                            record.put("is_amputee", rs.getInt("is_amputee"));
                            record.put("is_juvenile", rs.getInt("is_juvenile"));
                            record.put("is_partial_amputee", rs.getInt("is_partial_amputee"));
                            record.put("sync_staffid", rs.getString("sync_staffid"));
                            record.put("sync_firstname", rs.getString("sync_firstname"));
                            record.put("sync_lastname", rs.getString("sync_lastname"));
                            Timestamp sync_timestamp1 = rs.getTimestamp("sync_timestamp");
                            String sync_timestamp = sync_timestamp1.toString();
                            record.put("sync_timestamp", sync_timestamp);
                            record.put("thumb_capture", rs.getString("thumb_capture"));
                            array.put(record);

                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    jsonObject.put("biometrics_data", array);
                    String jsonInputString = null;
                    JSONArray arr = jsonObject.getJSONArray("biometrics_data");
                    length = arr.length();
                    Integer sync_id = null;
                    if (length == 0) {
                        JOptionPane.showMessageDialog(null, "Transmit Done Successful!");

                    } else {
                      

                        try {
                            String sql2 = "SELECT firstname,lastname,employee_num FROM users WHERE id='" + user + "'";

                            prepared = conn.prepareStatement(sql2);
                            rs1 = prepared.executeQuery();

                            while (rs1.next()) {
                                firstname = rs1.getString("firstname");
                                lastname = rs1.getString("lastname");
                                employee_num = rs1.getString("employee_num");
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        JSONObject firstObject = null;
                        int applicant_id = 0;
                        for (int i = 0; i < arr.length(); i++) {
                            firstObject = arr.getJSONObject(0);
                        }
                        Integer id1 = firstObject.getInt("ID");
                        String id = id1.toString();
                        Integer applicantId = firstObject.getInt("applicant_id");
                        String applicantid = applicantId.toString();
                        String right_fore = firstObject.getString("right_fore");
                        String right_originalcapture = firstObject.getString("right_originalcapture");
                        String right_little = firstObject.getString("right_little");
                        String right_middle = firstObject.getString("right_middle");
                        String right_ring = firstObject.getString("right_ring");
                        String right_thumb = firstObject.getString("right_thumb");
                        String left_fore = firstObject.getString("left_fore");
                        String left_little = firstObject.getString("left_little");
                        String left_middle = firstObject.getString("left_middle");
                        String left_ring = firstObject.getString("left_ring");
                        String left_thumb = firstObject.getString("left_thumb");
                        String left_originalcapture = firstObject.getString("left_originalcapture");
                        String imageURL = firstObject.getString("imageURL");
                        String signatureURL = firstObject.getString("signatureURL");
                        Integer staffid = firstObject.getInt("capture_staffid");
                        String capture_staffid = staffid.toString();
                        String capture_firstname = firstObject.getString("capture_firstname");
                        String capture_lastname = firstObject.getString("capture_lastname");
                        Integer is_amputee1 = firstObject.getInt("is_amputee");
                        String is_amputee = is_amputee1.toString();
                        Integer is_juvenile1 = firstObject.getInt("is_juvenile");
                        String is_juvenile = is_juvenile1.toString();
                        Integer is_partial_amputee1 = firstObject.getInt("is_partial_amputee");
                        String is_partial_amputee = is_partial_amputee1.toString();
                        // Integer sync_staffid1 = firstObject.getString("sync_staffid");
                        String sync_staffid = employee_num;
                        String sync_firstname = firstname;
                        String sync_lastname = lastname;
                        String sync_timestamp = updatedAt;
                        String capture_timestamp = firstObject.getString("capture_timestamp");
                        String thumb_capture = firstObject.getString("thumb_capture");

                        Map<String, String> arguments = new HashMap<>();

                        
                        arguments.put("id", id);
                        arguments.put("applicant_id", applicantid);
                        arguments.put("right_fore", right_fore);
                        arguments.put("right_originalcapture", right_originalcapture);
                        arguments.put("right_little", right_little);
                        arguments.put("right_middle", right_middle);
                        arguments.put("right_ring", right_ring);
                        arguments.put("right_thumb", right_thumb);
                        arguments.put("left_fore", left_fore);
                        arguments.put("left_little", left_little);
                        arguments.put("left_middle", left_middle);
                        arguments.put("left_ring", left_ring);
                        arguments.put("left_thumb", left_thumb);
                        arguments.put("left_originalcapture", left_originalcapture);
                        arguments.put("imageURL", imageURL);
                        arguments.put("signatureURL", signatureURL);
                        arguments.put("capture_staffid", capture_staffid);
                        arguments.put("capture_firstname", capture_firstname);
                        arguments.put("capture_lastname", capture_lastname);
                        //arguments.put("capture_timestamp", capture_timestamp);
                        arguments.put("is_amputee", is_amputee);
                        arguments.put("is_juvenile", is_juvenile);
                        arguments.put("is_partial_amputee", is_partial_amputee);
                        arguments.put("sync_staffid", sync_staffid);
                        arguments.put("sync_firstname", sync_firstname);
                        arguments.put("sync_lastname", sync_lastname);
                        arguments.put("sync_timestamp", sync_timestamp);
                        arguments.put("thumb_capture", thumb_capture);

                        StringJoiner sj = new StringJoiner("&");
                        for (Map.Entry<String, String> entry : arguments.entrySet())
                try {
                            sj.add(URLEncoder.encode(entry.getKey(), "UTF-8") + "="
                                    + URLEncoder.encode(entry.getValue(), "UTF-8"));
                        } catch (UnsupportedEncodingException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {

                            String sql3 = "UPDATE permitbiometrics SET sync_firstname= '" + firstname + "',"
                                    + "sync_lastname = '" + lastname + "',"
                                    + "sync_timestamp = '" + updatedAt + "',"
                                    + "sync_staffid= '" + employee_num + "'"
                                    + "WHERE applicantId = '" + applicantid + "'";

                            int result2 = state.executeUpdate(sql3);

                        } catch (SQLException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        String appendQuery = sj.toString();
                        String newQuery = myurl.getQuery();
                        if (newQuery == null) {
                            newQuery = appendQuery;
                        } else {
                            newQuery += "&" + appendQuery + "&" + "capture_timestamp=" + capture_timestamp;
                        }
                        URI newURI = null;
                        try {
                            newURI = new URI(myurl.getScheme(), myurl.getAuthority(),
                                    myurl.getPath(), newQuery);
                        } catch (URISyntaxException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        String uri = newURI.toString();
                        uri = uri.replaceFirst("\\#", "?");
                        URI finalURI = null;
                        try {
                            finalURI = new URI(uri);
                        } catch (URISyntaxException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        URL url = null;
                        try {
                            url = finalURI.toURL();
                        } catch (MalformedURLException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.out.println(url);
                        try {
                            con = (HttpURLConnection) url.openConnection();
                        } catch (IOException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            con.setRequestMethod("POST");
                        } catch (ProtocolException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        con.setRequestProperty("Accept", "application/json");
                        con.setRequestProperty("Content-Type", "application/json; utf-8");
                        con.setDoOutput(true);
                        try {
                            con.connect();
                        } catch (IOException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        BufferedReader reader = null;
                        try {
                            reader = new BufferedReader(new InputStreamReader(con.getInputStream()));
                        } catch (IOException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        StringBuilder results = new StringBuilder();
                        String line;
                        try {
                            while ((line = reader.readLine()) != null) {
                                results.append(line);
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        String returnedData = results.toString();
                        String str5 = returnedData.replaceAll("[()]", "");
                        String str3 = str5.substring(str5.indexOf(' '), str5.length());
                        String str2 = str3.replaceFirst("\"", "");
                        System.out.println(str2);

                        JSONArray arr2 = new JSONArray(str2);

                        String message = null;
                        for (int i = 0; i < arr2.length(); i++) {
                            message = arr2.getJSONObject(i).getString("message");
                        }

                        if (message.equals("Success")) {

                            String sql = "UPDATE police_details SET bio_sync_receipt_status = 1 WHERE police_idno ='" + applicantid + "'";

                            try {
                                int result = stmt.executeUpdate(sql);
                            } catch (SQLException ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            

                        } else {
                            length = 0;
                            try {
                                conn.close();
                                rs.close();
                                rs2.close();
                                rs1.close();
                                state.close();
                                stmt.close();
                            } catch (SQLException ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                } while (length > 0);
                String res = "Finished Execution";
                return res;
            }

            protected void done() {
            }

        };
        sw1.execute();
    }

}
